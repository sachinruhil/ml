#hello world
print("hello")

 #print hello world with variable
msg = "hello world"
print(msg)

#combining string
first_name = 'albert'
last_name ='einstein'
full_name = first_name + ' ' +last_name
print(full_name)

#list
bikes =['trek' , 'redline' , 'giant']

#get the first item in the list
first_bike = bikes[0]

#get the last name in the list
last_bike = bikes[-1]

#looping through a list
for bike in bikes:
    print(bike)

#adding item to list
bikes = []
bikes.append('trek')
bikes.append('redline')
bikes.append('giant')

#making numerical lists
squares = []
for x in range(1,11):
    squares.append(x**2)

#LIST(CoNT)
#list comphrehensions
squares = [x**2 for x in range (1,11)]

#slicing list
finishers = [ 'sam ', 'bob' ,'ada' , 'bea']
first_two = finishers[:2]

#coping of list
copy_of_bikes = bikes[:]

#TUPLES
# tuples are like list we cannot make modificatiopn in tuples
#making a tuples
dimension = (1920,1080)

#IF STATEMENT


#condition tests
"""equals x == 42
not equal x != 42
greater than x > 42
    or equal to x >= 42
less than x < 42
    or equal to <= 42"""

#condition test with lists
'trek' in bikes
'surely' not in bikes

#assigning boolean values
game_active = True
can_edit = False

# a simple if test
if age >= 18:
    print("you can vote")

#if elif else statement
if age < 4 :
    ticket_price = 0
elif age < 18 :
    ticket_price = 10
else :
    ticket_price =15


#WHILE LOOPS

current_value = 1
while current_value <= 5:
    print(current_value)
    current_value += 1
#setting the user when to quit
msg = ''
while msg != 'quit':
    msg = input("what's your message? ")
    print(msg)

#functions
def greet_user():
    print("hello")

#passing an argument
def greet_user(username):
    print("hello" + greet_user )
greet_user('sachin')

#default value for parameters
def make_pizza(topping ='bacomn'):
    print("have a" + topping + "pizza!")
make_pizza()
make_pizza('cococo')

#returning a value
def add_numbers(x,y):
    return x + y
sum = add_numbers(3 ,5)
print(sum)



#median of list
def median(numbers):
    numbers.sort()
    if len(numbers) % 2 :
        #The sort method sorts a list directly, rather than returning a new sorted list
        middle_index = int(len(numbers)/2)
        return numbers[middle_index]
    else:
        right_of_middle = len(numbers)//2
        left_of_middle = right_of_middle - 1
        return(numbers[right_of_middle] + numbers[left_of_middle])/2

test1 = median([1,2,3])
print("expected result: 2, actual result: {}".format(test1))

test2 = median([1,2,3,4])
print("expected result: 2.5, actual result: {}".format(test2))

test3 = median([53, 12, 65, 7, 420, 317, 88])
print("expected result: 65, actual result: {}".format(test3))

#building losts with for loops
names = ['sachin','sahil','vikash']
capitalized_names = []
for name in names :
    capitalized_names.append(name.title())
call = capitalized_names
print(call)


#sum of a list
def list_sum(input_list):
    sum = 0
    for element in input_list:
        sum += element


    return sum


test1 = list_sum([1, 2, 3])
print("expected result: 6, actual result: {}".format(test1))

test2 = list_sum([-1, 0, 1])
print("expected result: 0, actual result: {}".format(test2))

call = list_sum([1,2,3,4,5,6])
print(call)

#try
me = [ 1 ,2 , 3 , 4 , 5 , 6 , 7 , 8 ,9]
for i in range(1,10) :
    if  i % 2 == 0 :
        print(i)



